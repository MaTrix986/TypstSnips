# Use `> Inspect Editor Tokens and Scopes` to find out what context you're in

#--------------------text

snippet iff "if and only if" wA
if and only if
endsnippet

#--------------------visual
snippet UB "underbrace()" iAm
underbrace(${1:${VISUAL}}, $2)
endsnippet

snippet OB "overbrace()" iAm
overbrace(${1:${VISUAL}}, $2)
endsnippet

snippet UL "underline()" iAm
underline(${1:${VISUAL}}, $2)
endsnippet

snippet OL "overline()" iAm
overline(${1:${VISUAL}}, $2)
endsnippet


#--------------------math mode

snippet mk "Inline Math" iA
$${1}$${0}
endsnippet

snippet `(\$[" "])(\.|\,|\?|\-)` "Auto formatting after Inline Math" iwA
$``rv = m[2]`` ${0}
endsnippet

snippet dm "Display Math" bA
$
  ${0} 
$
endsnippet

snippet dis "display()" iAm
display(${1:``rv= VISUAL``})
endsnippet

#--------------------enviroment
snippet `(listabc)` "list " iA
``
const map = {"listabc": "#set enum(numbering: \"a)\")"}
rv = map[m[1]] 
``
+ 
  $0
endsnippet

snippet `(^|\s\s+)(\\)(def|thm|pf|prop|hyp|ex|sol|eg|prob|ans)` "Customized enviroments" bA
``
const map = {
  "def": "definition",
  "thm": "theorem",
  "pf": "proof",
  "prop": "property",
  "hyp": "hypothesis",
  "ex": "exercise",
  "sol": "solution",
  "eg": "example",
  "prob": "problem",
  "ans": "answer",
  }
rv = m[1] + '#' + map[m[3]] + '['
``
``rv = m[1]``  $1
``rv = m[1] + ']' ``
$0
endsnippet

snippet `(^|\s\s+)(\\)(lemma|corollary|note|remark|question)` "Customized enviroments" bA
``
rv = m[1] + '#' + m[3] + '['
``
``rv = m[1]``  $1
``rv = m[1] + ']' ``
$0
endsnippet

#--------------------Greek alphabet
snippet `(\;)(a|b|g|d|;e|e|z|h|t|i|k|l|m|n|x|r|s|\;t|u|p|vp|c|\;p|o)` "greek alphabet" iAm
``
const map = {
  "a": "alpha",
  "b": "beta",
  "g": "gamma",
  "d": "delta",
  "e": "epsilon",
  ";e": "eta",
  "z": "zeta",
  "h": "eta",
  "t": "theta",
  "i": "iota",
  "k": "kappa",
  "l": "lambda",
  "m": "mu",
  "n": "nu",
  "x": "xi",
  "r": "rho",
  "s": "sigma",
  ";t": "tau",
  "u": "upsilon",
  "p": "phi",
  "vp": "phi.alt",
  "c": "chi",
  ";p": "psi",
  "o": "omega"
}
rv = map[m[2]] 
``
endsnippet

snippet `(\;)(A|B|G|D|E|;E|Z|T|L|X|R|S|U|P|C|\;P|\;T|O)` "Greek Alphabet " iAm
``
const map = {
  "A": "Alpha",
  "B": "Beta",
  "G": "Gamma",
  "D": "Delta",
  "E": "Epsilon",
  ";E": "Eta",
  "T": "Theta",
  "L": "Lambda",
  "X": "Xi",
  "R": "Rho",
  "S": "Sigma",
  "U": "Upsilon",
  ";T": "Tau",
  "P": "Phi",
  "C": "Chi",
  ";P": "Psi",
  "O": "Omega"
}
rv = map[m[2]] 
``
endsnippet

#--------------------delimiters
#Need disable "editor.autoClosingBrackets" and "editor.autoClosingQuotes" in setting for typst files
#The additional regex (.?) solve the issues https://github.com/draivin/hsnips/issues/94

snippet pp "parenthesis" iAm
($1)$0
endsnippet

snippet `(.?)(\()` "()" iA
``rv = m[1]``($1)$0
endsnippet

snippet `(.?)(\[)` "[]" iA
``rv = m[1]``[$1]$0
endsnippet

snippet `(.?)(\{)` "{}" iA
``rv = m[1]``{$1}$0
endsnippet

snippet `([^\w]|^)(\")` "quote" iA
``rv = m[1] + "\""``$1``rv = "\""``
endsnippet

priority 1
snippet `(\"\")` "quote" iA
``rv = "\""``$1``rv = "\""``
endsnippet

context scope_math(context)
snippet `(.?)(\")` "quote" iA
``rv = m[1] + "\""``$1``rv = "\""``
endsnippet

snippet <> "angle.l $1 angle.r $0" iAm
angle.l $1 angle.r $0
endsnippet

snippet abs "abs" iAm
abs($1)$0
endsnippet

#--------------------superscript
snippet tp "to the ... power" iAm
^(${1:3})$0
endsnippet

snippet sr "^2" iAm
^2
endsnippet

snippet invs "inverse" iAm
^(-1)
endsnippet

snippet compl "complement" iAm
^(complement)
endsnippet

#--------------------subscript
snippet `(.?)(\_)` "subscript" iAm
``rv = m[1]``_($1)$0
endsnippet

snippet `([A-Za-z\)]|\')( _)` "Auto close space for subscript" iAm
`` rv = m[1] ``_
endsnippet

priority 1
snippet `([A-Za-z\)]|\')(\d)` "Auto subscript" iAm
`` rv = m[1] + "_" + m[2]``
endsnippet

priority 1
snippet `([A-Za-z\)]|\')_(\d{2})` "Auto subscript" iAm
`` rv = m[1] + "_(" + m[2] + ")" ``
endsnippet

priority 1
snippet `(?<![A-Za-z])([A-Za-z])([A-Za-z])\2` "Auto subscript" iAm
`` rv = m[1] + "_" + m[2] ``
endsnippet

priority 1
snippet `(')([A-Za-z])\2` "Auto subscript for prime symbol" iAm
`` rv = m[1] + "_" + m[2] ``
endsnippet

priority 1
snippet `(\)|mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)([A-Za-z])\2` "Auto subscript for greek letter" iAm
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

#--------------------accent
snippet `(?<![A-Za-z])([A-Za-z01])(grave|acute|hat|tilde|macron|breve|dot|diaer|circle|caron|vec|upright|italic|bo|sans|frak|mono|cal|ov)` "hat" iAm
``
const map = {"vec": "arrow", "bo": "bold", "ov": "overline" }
rv = (map[m[2]] || m[2]) + "(" + m[1] + ")"
``
endsnippet

snippet `(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(grave|acute|hat|tilde|macron|breve|dot|diaer|circle|caron|vec|upright|italic|bo|sans|frak|mono|cal|ov)` "hat" iAm
``
const map = {"vec": "arrow", "bo": "bold", "ov": "overline" }
rv = (map[m[2]] || m[2]) + "(" + m[1] + ")"
``
endsnippet

snippet `((grave|acute|hat|tilde|macron|breve|dot|dot\.double|dot\.triple|dot\.quad|diaer|circle|acute\.double|caron|arrow|arrow\.l|upright|italic|bold|sans|frak|mono|bb|cal|overline)\([a-zA-Z\d]+\))(grave|acute|hat|tilde|macron|breve|dot|diaer|circle|caron|vec|upright|italic|bo|sans|frak|mono|cal|ov)` "hat" iAm
``
const map = {"vec": "arrow", "bo": "bold", "ov": "overline" }
rv = (map[m[3]] || m[3]) + "(" + m[1] + ")"
``
endsnippet

#--------------------arrow
priority 2
snippet iff "<=>" wAmm
<=> $0
endsnippet

snippet `(^|\s\s+)(=>|<=>)` "Auto align for arrow" bAm
``rv = m[1] + m[2]+ "&&"`` ${0}
endsnippet

snippet `(^|\s\s+)(=>|<=>)(&|&&)(  )` "Change align for arrow" bAm
``
const map = {"&": "&&", "&&": "&"}
rv = m[1] + m[2]+ map[m[3]] + " "
``
endsnippet

#--------------------set symbol
snippet set "set" iAm
{$1}
endsnippet

snippet cc "subset" Am
subset $0
endsnippet

snippet `(\\)(u)` "subset" iAm
union.big
endsnippet

snippet `(\\)(n)` "subset" iAm
sect.big
endsnippet

snippet `(subset|supset)(=| =)` "csubset" iAm
``rv = m[1]``.eq $0
endsnippet

snippet notin "in.not" iAm
in.not
endsnippet

#--------------------relation symbol
snippet == "=&" iAm
=& $0
endsnippet

snippet `(^|\s\s+)(=|>|<|<=|>=)( )` "Auto align for equal" iAm
``rv = m[1] + m[2]``& $0
endsnippet

snippet `(\& )(=|>|<|<=|>=)` "Auto align for equal" iAm
``rv = m[1] + m[2] + "&"`` $0
endsnippet

#--------------------arithmetic symbol
snippet sq "sqrt()" iAm
sqrt($1)
endsnippet

snippet rt "root()" iAm
root(${1:n}, $2)
endsnippet

snippet +- "plus.minus" iAm
plus.minus $0
endsnippet

snippet -+ "minus.plus" iAm
minus.plus $0
endsnippet

#--------------------calculus symbol
snippet lim "limit" iAm
lim_(${1:n} -> oo) $0
endsnippet

snippet lsup "limsup" iAm
limsup_(${1:n} -> oo) $0
endsnippet

snippet linf "liminf" iAm
liminf_(${1:n} -> oo) $0
endsnippet

# snippet `(d)([A-Za-z])( )` "Auto dif" iAm
# dif ``rv = m[2] + m[3]``
# endsnippet

snippet `(d)(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)( |\\)` "Auto dif" iAm
dif ``rv = m[2] + m[3]``
endsnippet

snippet der "derive" iAm
(dif ${1:y})/(dif ${3:x})
endsnippet

snippet dder "derive" iAm
(dif^2 ${1:y})/(dif ${3:x}^2)
endsnippet

snippet par "partial" iAm
(diff ${1:y})/(diff ${3:x})
endsnippet

snippet int "integral" iAm
integral
endsnippet

#--------------------align & space
priority 1
snippet `(^|\s\s+)( )` "Auto add align" bAm
``rv = m[1]``& $0
endsnippet

snippet `(^|\s+)(&|&&)(  )` "Auto change align" bAm
``
const map = {"&": "&& ", "&&": ""}
rv = m[1] + map[m[2]] ``
endsnippet

snippet `(\S)(  )` "quad" bAm
``rv = m[1]`` quad $0
endsnippet

#--------------------others
snippet ...c "dots.c" iAm
dots.c
endsnippet

snippet `([^\,\s])( |)(\.\.\.)` "Auto dots.c" iAm
``rv = m[1]`` dots.c $0
endsnippet





